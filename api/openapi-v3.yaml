openapi: 3.0.0
servers:
  - description: Jokes Server
    url: http://localhost:3030/api
info:
    version: "1.0.0"
    title:  Http methods
    description: |
        Always use http methods for manipulating resources.
        1. Use `GET` to get a resource
        2. Use `POST` to create a resource
        3. Use `PUT` to update a resource
        4. Use `PATCH` to partially update a resource
        5. Use `DELETE` to delete a resource
        6. if the action doesn't fit, use a speific endpoint but treat it as a resource
    contact:
        email: nashat.ib@gmail.com
paths:
  /jokes:
    get:
      tags:
        - 'Jokes'
      summary: get all jokes
      parameters:
        - name: historySize
          description: Size of returned history list
          in: query
          schema:
            type: integer
        - name: historyNumber
          description: history page number
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: All jokes exist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Joke'
    post:
      tags:
        - 'Jokes'
      summary: Create a new joke
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Joke'
            example:
              id: 0
              category: 'Programming'
              body: 'Programmer (noun.): A machine that turns coffee into code'
              safe: true
      responses:
        '200':
          description: Joke added
  /jokes/{id}:
    get:
      tags:
        - 'Jokes'
      summary: get joke by id
      parameters:
        - name: id
          in: path
          description: Joke ID
          required: true
          schema:
            type: string
        - name: historySize
          description: Size of returned history list
          in: query
          schema:
            type: integer
        - name: historyNumber
          description: history page number
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Joke with spesific id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Joke'
    put:
      tags:
        - 'Jokes'
      summary: Update a joke by id
      parameters:
        - name: id
          in: path
          description: Joke ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Joke'
            example:
              category: 'Dark'
              body: 'Updated body'
              safe: false
      responses:
        '200':
          description: Joke updated
    delete:
      tags:
        - 'Jokes'
      summary: Delete a joke by id
      parameters:
        - name: id
          in: path
          description: Joke ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Joke deleted
    patch:
      tags:
        - 'Jokes'
      summary: Partially update a joke
      parameters:
        - name: id
          in: path
          description: Joke ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              updateSafe:
                value:
                  safe: false
              updateCategory:
                value:
                  category: 'Misc'
      responses:
        '200':
          description: Joke deleted
  /jokes/{id}/safe:
    put:
      tags:
        - 'Jokes'
      summary: Update safe field for joke by id
      parameters:
        - name: id
          in: path
          description: Joke ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                safe:
                  type: boolean
      responses:
        '200':
          description: Joke safe field updated

  /categories:
    get:
      tags:
        - 'Category'
      summary: get all joke categores
      responses:
        '200':
          description: All jokes categores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JokeCategory'
    post:
      tags:
        - 'Category'
      summary: create new joke category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JokeCategory'
      responses:
        '200':
          description: Joke category added
  /categories/{id}":
    get:
      tags:
        - 'Category'
      summary: get joke category by id
      parameters:
        - name: id
          in: path
          description: Joke category ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Joke category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JokeCategory'
    put:
      tags:
        - 'Category'
      summary: update joke category by id
      parameters:
        - name: id
          in: path
          description: Joke category ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JokeCategory'
      responses:
        '200':
          description: Joke category updated
    delete:
      tags:
        - 'Category'
      summary: delete joke category by id
      parameters:
        - name: id
          in: path
          description: Joke category ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JokeCategory'
      responses:
        '200':
          description: Joke category deleted

components:
    schemas:
      Joke:
        type: object
        properties:
          id:
            type: integer
            description: Joke id
          category:
            type: string
            description: Joke category
          body:
            type: string
            description: Joke body
          safe:
            type: boolean
            description: Is joke safe
          last_updated:
            type: integer
            description: Last updated
          votes:
            $ref: '#/components/schemas/VoteHistories'

      VoteHistories:
        type: object
        properties:
          amount:
            type: integer
          history:
            type: array
            items:
              $ref: '#/components/schemas/VoteHistory'

      VoteHistory:
        type: object
        properties:
          id:
            type: string
          username:
            type: string
          up:
            type: boolean
          date:
            type: integer

      JokeCategory:
        type: object
        properties:
          id:
            type: string
            description: Joke category id
          name:
            type: string
            description: Joke category name
          count:
            type: integer
            description: Joke category count
          list:
            type: array
            items:
              $ref: '#/components/schemas/Joke'